version: 2.1

orbs:
  node: circleci/node@5.2.0

commands:
  fetch_images:
    parameters:
      images:
        default: ""
        type: string
    steps:
      - run:
          name: "Fetch images: <<parameters.images>>"
          command: bash .circleci/scripts/fetch-docker-images.sh <<parameters.images>>

  node_install:
    steps:
      - restore_cache:
          name: Restore nvm cache
          keys:
            # Invalidate the cache based on architecture, the version of Node defined in `nvmrc`
            - v1-nvm-cache-{{ arch }}-{{ checksum ".nvmrc" }}
      - run: nvm install
      - save_cache:
          name: Save nvm cache
          key: v1-nvm-cache-{{ arch }}-{{ checksum ".nvmrc" }}
          paths:
            - /opt/circleci/.nvm/.cache

  install_dependencies:
    description: Install the node dependencies for core
    parameters:
      install-cypress:
        type: boolean
        default: false
    steps:
      - run:
          name: Hash package-lock.json
          command: bash .circleci/scripts/hash-package-lock.sh
      - restore_cache:
          name: Load node_modules from the cache if they haven't changed
          keys:
            - v1-npm-deps-{{ checksum "package-lock.json.md5" }}
            - v1-npm-deps-
      - when:
          condition: <<parameters.install-cypress>>
          steps:
            - run:
                name: Install npm dependencies
                command: npm i --workspaces --include-workspace-root
      - unless:
          condition: <<parameters.install-cypress>>
          steps:
            - run:
                name: Install npm dependencies
                command: CYPRESS_INSTALL_BINARY=0 npm i --workspaces --include-workspace-root
      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json.md5" }}
          paths: node_modules

  build_core:
    steps:
      - run:
          name: Build Core
          command: npm run build:core

  build_api:
    steps:
      - run:
          name: Build API
          command: npm run build:api

  build_e2e_tests:
    steps:
      - run:
          name: Build e2e tests
          command: npm run build:e2e-test

  save_artifacts:
    steps:
      - run:
          name: Compress the artifacts for easier downloading
          when: always
          command: bash .circleci/scripts/screenshots-compress.sh
      - run:
          name: Move the gzipped files across
          when: always
          command: bash .circleci/scripts/screenshots-move.sh
      - store_artifacts:
          path: /home/circleci/project/saved_artifacts
      - store_test_results:
          path: packages/e2e-test/test-results/results/report.xml

  set_locale:
    steps:
      - run:
          name: Set GB locale
          command: bash .circleci/scripts/set-locale.sh

  install_ms_edge:
    steps:
      - restore_cache:
          keys:
            - ubuntu-package-cache-v1-{{ checksum ".circleci/scripts/install-ms-edge-on-linux.sh" }}
      - run:
          name: Install MS Edge (dev)
          command: bash .circleci/scripts/install-ms-edge-on-linux.sh
      - save_cache:
          key: ubuntu-package-cache-v1-{{ checksum ".circleci/scripts/install-ms-edge-on-linux.sh" }}
          paths:
            - ~/vendor/apt_cache
            - ~/vendor/apt_lists

  setup_ui:
    steps:
      - node_install
      - set_locale

  build_core_images:
    steps:
      - run:
          name: Build message forwarder image
          command: docker-compose -f environment/docker-compose.yml build phase-1-message-forwarder phase-2-message-forwarder

  build_audit_logging_images:
    steps:
      - run:
          name: Clone bichard7-next-audit-logging
          command: git clone --depth 1 https://github.com/ministryofjustice/bichard7-next-audit-logging.git ~/bichard7-next-audit-logging
      - run:
          name: Build audit logging images
          working_directory: ~/bichard7-next-audit-logging
          command: make build-api-server build-event-handler-server

  start_services:
    parameters:
      ARGS:
        default: ""
        type: string
      SERVICES:
        default: ""
        type: string
      FLAGS:
        default: ""
        type: string
    steps:
      - run:
          name: "Run services: <<parameters.SERVICES>>"
          command: |
            <<parameters.ARGS>> docker compose --project-name bichard -f environment/docker-compose.yml \
            up -d <<parameters.SERVICES>> <<parameters.FLAGS>> --wait <<parameters.SERVICES>>

ui_params: &ui_params
  ms-edge:
    type: boolean
    default: false
  api:
    type: boolean
    default: false
  forces-with-api-enabled:
    type: string
    default: ""
  forces-with-court-date-received-date-mismatch-enabled:
    type: string
    default: "01"
  forces-with-trigger-and-exception-quality-auditing-enabled:
    type: string
    default: "01"
  api-case-details:
    type: boolean
    default: false
  api-case-list:
    type: boolean
    default: false
  api-case-resubmit:
    type: boolean
    default: false

ui_envs: &ui_envs
  USE_API: << parameters.api >>
  FORCES_WITH_API_ENABLED: << parameters.forces-with-api-enabled >>
  FORCES_WITH_COURT_DATE_RECEIVED_DATE_MISMATCH_ENABLED: << parameters.forces-with-court-date-received-date-mismatch-enabled >>
  FORCES_WITH_TRIGGER_AND_EXCEPTION_QUALITY_AUDITING_ENABLED: << parameters.forces-with-trigger-and-exception-quality-auditing-enabled >>
  USE_API_CASE_ENDPOINT: << parameters.api-case-details >>
  USE_API_CASES_INDEX_ENDPOINT: << parameters.api-case-list >>
  USE_API_CASE_RESUBMIT_ENDPOINT: << parameters.api-case-resubmit >>

jobs:
  lint_and_build:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - checkout
      - set_locale
      - install_dependencies
      - run:
          name: Check the code for linting errors
          command: npm run lint:ci
      - build_core

  test_core:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - install_dependencies
      - build_core
      - fetch_images:
          images: nodejs-20-2023
      - run:
          name: Run PostgreSQL
          command: npm run postgres
      - run:
          name: Run ActiveMQ
          command: npm run activemq
      - run:
          name: Run Localstack
          command: npm run localstack
      - run:
          name: Run Mailhog
          command: npm run mailserver
      - run:
          name: Run Conductor
          command: npm run conductor-only
      - run:
          name: Checkout the audit logging repo
          command: git clone --depth 1 https://github.com/ministryofjustice/bichard7-next-audit-logging.git ~/bichard7-next-audit-logging
      - run:
          name: Build the audit logging API server
          working_directory: ~/bichard7-next-audit-logging
          command: make build-api-server
      - run:
          name: Run Audit Logging API
          command: npm run audit-log
      - node_install
      - run:
          name: Run unit tests against core code
          command: nvm use && npm run -w packages/core test:unit
      - run:
          name: Run integration tests against core code
          command: nvm use && npm run -w packages/core test:integration

  comparison_test:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: false
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - install_dependencies
      - build_core
      - run:
          name: Spin up the PostgreSQL database
          command: npm run postgres
      - run:
          name: Run E2E comparison tests against Core Phase 1
          command: npm run -w packages/core test:compare:phase1
      - run:
          name: Run E2E comparison tests against Core Phase 2
          command: npm run -w packages/core test:compare:phase2
      - run:
          name: Run E2E comparison tests against Core Phase 3
          command: npm run -w packages/core test:compare:phase3

  characterisation_test:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: false
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - << pipeline.parameters.characterisation-test-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - install_dependencies
      - build_core
      - run:
          name: Run tests against core code
          command: npm run test:characterisation -w packages/core

  test_conductor:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: large
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - << pipeline.parameters.conductor-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - node_install
      - install_dependencies
      - build_core
      - fetch_images:
          images: nodejs-20-2023 nginx-nodejs-20-2023-supervisord
      - build_audit_logging_images
      - run:
          name: Boot Conductor infrastructure
          environment:
            PHASE_2_QUEUE_NAME: TEST_PHASE2_QUEUE
            PHASE_3_QUEUE_NAME: TEST_PHASE3_QUEUE
          command: .circleci/scripts/run-infrastructure.sh '' all-build-worker
      - run:
          name: Test the workflows
          command: nvm use && npm run -w packages/conductor test

  test_message_forwarder:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: large
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.message-forwarder-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - node_install
      - install_dependencies
      - build_core
      - fetch_images:
          images: nodejs-20-2023 nginx-nodejs-20-2023-supervisord
      - build_audit_logging_images
      - run:
          name: Boot Conductor infrastructure
          command: .circleci/scripts/run-infrastructure.sh '' all-build-worker
      - run:
          name: Test the workflows
          command: nvm use && npm run -w packages/message-forwarder test

  e2e_test:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: large
    parallelism: 10
    parameters:
      next-ui:
        type: boolean
      phase2-core-canary-ratio:
        type: enum
        enum: ["1.0", "0.0"]
      phase3-core-canary-ratio:
        type: enum
        enum: ["1.0", "0.0"]
      ms-edge:
        type: boolean
    environment:
      NEXTUI: << parameters.next-ui >>
      PHASE2_CORE_CANARY_RATIO: << parameters.phase2-core-canary-ratio >>
      PHASE3_CORE_CANARY_RATIO: << parameters.phase3-core-canary-ratio >>
      MS_EDGE: << parameters.ms-edge >>
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.conductor-changes >>
              - << pipeline.parameters.core-changes >>
              - << pipeline.parameters.e2e-test-changes >>
              - << pipeline.parameters.env-changes >>
              - << pipeline.parameters.message-forwarder-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - run:
          name: Check for tests
          command: bash .circleci/scripts/check-tests.sh "e2e-test" "features/**/*.feature"
      - set_locale
      - when:
          condition:
            equal: [true, << parameters.ms-edge >>]
          steps:
            - install_ms_edge
      - install_dependencies
      - build_e2e_tests
      - fetch_images:
          images: nodejs-20-2023 nginx-nodejs-20-2023-supervisord
      - run:
          name: Build message forwarder image
          command: .circleci/scripts/build-message-forwarder.sh
      - build_audit_logging_images
      - run:
          name: Run the infrastructure
          command: .circleci/scripts/run-infrastructure.sh '' all-build-worker
      - run:
          name: Install browsers for puppeteer
          working_directory: packages/e2e-test
          command: "npm run install-browsers"
      - run:
          name: Run e2e tests against core code
          working_directory: packages/e2e-test
          environment:
            AWS_URL: http://localhost:4566
            RECORD: "true"
          command: bash ./scripts/run_test_chunk.sh 'not @Excluded and not @ExcludedOnConductor and not @OnlyRunsOnPNC'
      - save_artifacts

  test_api:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.api-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.ui-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - node_install
      - install_dependencies
      - build_api
      - fetch_images:
          images: nodejs-20-2023 nginx-nodejs-20-2023-supervisord
      - build_audit_logging_images
      - run:
          name: Boot Dependencies
          command: npm run conductor
      - run:
          name: Run unit and integration tests against API code
          command: nvm use && npm run -w packages/api test
      - run:
          name: Run e2e tests against API code
          command: nvm use && npm run -w packages/api test:e2e

  build_api_docker_image:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.user-service-changes >>
              - << pipeline.parameters.e2e-test-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - << pipeline.parameters.api-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - run: ./scripts/build-api-docker.sh
      - run:
          name: Save Docker image
          command: |
            mkdir -p images
            docker image save -o "images/api:latest" "api:latest"
      - persist_to_workspace:
          root: .
          paths:
            - images

  test_common:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: false
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.common-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - node_install
      - install_dependencies
      - build_core
      - run:
          name: Unit test common
          command: npm run test -w packages/common

  test_postgres:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: false
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.env-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - run:
          name: Spin up the PostgreSQL database
          command: npm run postgres
      - run:
          command: DB_HOST=172.17.0.1 bash ./environment/postgres/tests/test-all.sh
          name: run Postgres function tests

  build-ui:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.user-service-changes >>
              - << pipeline.parameters.e2e-test-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - << pipeline.parameters.api-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - run: ./scripts/build-ui-docker.sh
      - run:
          name: Save Docker image
          command: |
            mkdir -p images
            docker image save -o "images/ui:latest" "ui:latest"
      - persist_to_workspace:
          root: .
          paths:
            - images

  test_ui:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: large
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - << pipeline.parameters.api-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - setup_ui
      - install_dependencies
      - fetch_images:
          images: nodejs-20-2023
      - build_audit_logging_images
      - start_services:
          SERVICES: activemq localstack db-seed audit-log-api
      - build_core
      - run:
          name: Run code-based unit tests
          command: npm run -w packages/ui test:unit
      - run:
          name: Run integration tests
          command: npm run -w packages/ui test:integration

  cypress_component_test:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    parameters:
      ms-edge:
        type: boolean
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - setup_ui
      - install_dependencies:
          install-cypress: true
      - run:
          name: Install GOV.UK Assets
          command: npm run -w packages/ui install:assets
      - build_core
      - when:
          condition:
            equal: [true, << parameters.ms-edge >>]
          steps:
            - install_ms_edge
      - run:
          name: Install Cypress
          command: ./.circleci/scripts/install-cypress.sh 2>&1
          background: true
      - run:
          name: Wait for cypress install to finish
          command: until [ -f cypressInstalled ]; do sleep 1; done
          no_output_timeout: 10m
      - run:
          name: Retrying installing Cypress
          command: ./.circleci/scripts/install-cypress.sh
      - run:
          name: Run UI component tests
          command: MS_EDGE="<< parameters.ms-edge >>" bash ./.circleci/scripts/ui-scripts/run-component-tests.sh
          environment:
            UI_IS_HTTPS: true
            TZ: "Europe/London"
      - store_test_results:
          path: ~/project/packages/ui/cypress/results
      - store_artifacts:
          path: ~/project/packages/ui/cypress/videos
      - store_artifacts:
          path: ~/project/packages/ui/cypress/screenshots

  test_user_service:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.user-service-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - set_locale
      - node_install
      - install_dependencies
      - fetch_images:
          images: nodejs-20-2023 nginx-nodejs-20-2023-supervisord
      - build_audit_logging_images
      - start_services:
          SERVICES: db-seed audit-log-api
      - run:
          name: Run unit tests against user service code
          command: nvm use && npm run -w packages/user-service test:unit
      - run:
          name: Run integration tests against user service code
          command: nvm use && npm run -w packages/user-service test:integration

  test_user_service_e2e:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: large
    parallelism: 4
    parameters:
      ms-edge:
        type: boolean
        default: false
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.user-service-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - run:
          name: Check for tests
          command: bash .circleci/scripts/check-tests.sh "user-service" "cypress/e2e/**/*.cy.js"
      - attach_workspace:
          at: .
      - set_locale
      - node_install
      - install_dependencies:
          install-cypress: true
      - when:
          condition:
            equal: [true, << parameters.ms-edge >>]
          steps:
            - install_ms_edge
      - run:
          name: Install GOV.UK Assets
          command: npm run -w packages/user-service install:assets
      - run:
          name: Build the user service
          command: npm run -w packages/user-service build
      - start_services:
          SERVICES: db-seed audit-log-api
      - run:
          name: Run e2e tests against user service code
          command: MS_EDGE="<< parameters.ms-edge >>" bash .circleci/scripts/user-service/run-cypress-e2e-tests.sh
      - store_test_results:
          path: ~/project/packages/user-service/cypress/results
      - store_artifacts:
          path: ~/project/packages/user-service/cypress/videos
      - store_artifacts:
          path: ~/project/packages/user-service/cypress/screenshots

  build_user_service_docker_image:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: medium
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.user-service-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.e2e-test-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - << pipeline.parameters.api-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - run: ./scripts/build-user-service-docker.sh
      - run:
          name: Save Docker image
          command: |
            mkdir -p images
            docker image save -o "images/user-service:latest" "user-service:latest"
      - persist_to_workspace:
          root: .
          paths:
            - images

  cypress_e2e_tests:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: large
    parallelism: 10
    parameters:
      <<: *ui_params
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.user-service-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - and:
                  - equal: [true, << pipeline.parameters.api-changes >>]
                  - equal: [true, << parameters.api >>]
          steps:
            - run: circleci-agent step halt
      - checkout
      - run:
          name: Check for tests
          command: bash .circleci/scripts/check-tests.sh "ui" "cypress/e2e/**/*.cy.ts"
      - attach_workspace:
          at: .
      - run:
          name: Load ui image
          command: |
            docker image load < "images/ui:latest"
      - run:
          name: Load user-service image
          command: |
            docker image load < "images/user-service:latest"
      - when:
          condition:
            equal: [true, << parameters.api >>]
          steps:
            - run:
                name: Load api image
                command: |
                  docker image load < "images/api:latest"
      - setup_ui
      - install_dependencies:
          install-cypress: true
      - build_core
      - when:
          condition:
            equal: [true, << parameters.ms-edge >>]
          steps:
            - install_ms_edge
      - run:
          command: ./.circleci/scripts/install-cypress.sh 2>&1
          background: true
      - fetch_images:
          images: nodejs-20-2023 nginx-auth-proxy
      - build_audit_logging_images
      - run:
          name: Wait for cypress install to finish
          command: until [ -f cypressInstalled ]; do sleep 1; done
          no_output_timeout: 10m
      - run:
          name: Retrying installing Cypress
          command: ./.circleci/scripts/install-cypress.sh
      - run:
          name: Building infrastructure
          environment:
            <<: *ui_envs
          command: bash .circleci/scripts/run-infrastructure.sh ui ui
      - when:
          condition:
            equal: [true, << parameters.api >>]
          steps:
            run:
              command: npm run conductor
      - run:
          name: Run UI tests
          command: bash .circleci/scripts/ui-scripts/run-cypress-e2e-tests.sh
          environment:
            MS_EDGE: << parameters.ms-edge >>
            API: << parameters.api >>
            UI_IS_HTTPS: true
            TZ: "Europe/London"
      - store_test_results:
          path: ~/project/packages/ui/cypress/results
      - store_artifacts:
          path: ~/project/packages/ui/cypress/videos
      - store_artifacts:
          path: ~/project/packages/ui/cypress/screenshots

  cucumber_e2e_tests:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: large
    parallelism: 10
    parameters:
      <<: *ui_params
    environment:
      RECORD: "true"
      STACK_TYPE: next
      WORKSPACE: local-next
      AUTH_TYPE: user-service
      TZ: "Europe/London"
      MS_EDGE: << parameters.ms-edge >>
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.user-service-changes >>
              - << pipeline.parameters.e2e-test-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
              - and:
                  - equal: [true, << pipeline.parameters.api-changes >>]
                  - equal: [true, << parameters.api >>]
          steps:
            - run: circleci-agent step halt
      - checkout
      - run:
          name: Check for tests
          command: bash .circleci/scripts/check-tests.sh "e2e-test" "features/**/*.feature"
      - attach_workspace:
          at: .
      - run:
          name: Load ui image
          command: |
            docker image load < "images/ui:latest"
      - run:
          name: Load user-service image
          command: |
            docker image load < "images/user-service:latest"
      - when:
          condition:
            equal: [true, << parameters.api >>]
          steps:
            - run:
                name: Load api image
                command: |
                  docker image load < "images/api:latest"
      - setup_ui
      - install_dependencies
      - build_e2e_tests
      - when:
          condition:
            equal: [true, << parameters.ms-edge >>]
          steps:
            - install_ms_edge
      - fetch_images:
          images: nodejs-20-2023 nginx-nodejs-20-2023-supervisord
      - build_core_images
      - build_audit_logging_images
      - run:
          name: Install browsers for puppeteer
          working_directory: packages/e2e-test
          command: "npm run install-browsers"
      - run:
          name: Building infrastructure
          environment:
            <<: *ui_envs
          command: bash .circleci/scripts/run-infrastructure.sh ui all
      - run:
          name: Run e2e tests against UI code
          working_directory: packages/e2e-test
          environment:
            RECORD: "true"
            NEXTUI: "true"
            MESSAGE_ENTRY_POINT: "s3"
            MS_EDGE: "<< parameters.ms-edge >>"
          command: bash ./scripts/run_test_chunk.sh "not @Excluded and not @ExcludedOnMaster and not @OnlyRunsOnPNC"
      - save_artifacts

  zap_scanner:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << pipeline.parameters.docker-layer-caching >>
    resource_class: large
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.circleci-changes >>
              - << pipeline.parameters.ui-changes >>
              - << pipeline.parameters.user-service-changes >>
              - << pipeline.parameters.common-changes >>
              - << pipeline.parameters.core-changes >>
          steps:
            - run: circleci-agent step halt
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Load ui image
          command: |
            docker image load < "images/ui:latest"
      - run:
          name: Load user-service image
          command: |
            docker image load < "images/user-service:latest"
      - setup_ui
      - install_dependencies
      - fetch_images:
          images: nodejs-20-2023
      - build_audit_logging_images
      - fetch_images:
          images: nginx-auth-proxy
      - build_core
      - run:
          command: npm run ui
      - run:
          name: Seed database
          command: DEPLOY_NAME=e2e-test npm run -w packages/ui seed-data
      - run:
          name: Run ZAP scanner
          command: npm run -w packages/ui zap

parameters:
  docker-layer-caching:
    type: boolean
    default: false
  circleci-changes:
    type: boolean
    default: false
  env-changes:
    type: boolean
    default: false
  api-changes:
    type: boolean
    default: false
  common-changes:
    type: boolean
    default: false
  conductor-changes:
    type: boolean
    default: false
  core-changes:
    type: boolean
    default: false
  message-forwarder-changes:
    type: boolean
    default: false
  ui-changes:
    type: boolean
    default: false
  user-service-changes:
    type: boolean
    default: false
  e2e-test-changes:
    type: boolean
    default: false
  characterisation-test-changes:
    type: boolean
    default: false

merge_queue_only: &merge_queue_only
  filters:
    branches:
      only:
        - /^gh-readonly-queue\/main.*/

workflows:
  test-all:
    jobs:
      - lint_and_build
      - test_message_forwarder
      - test_postgres
      - test_api
      - test_common
      - test_conductor
      - test_core
      - test_ui
      - test_user_service
      - test_user_service_e2e
      - characterisation_test
      - comparison_test

      - build-ui:
          name: build-ui
          requires:
            - test_ui
      - cypress_component_test:
          name: cypress_component_test
          ms-edge: false
          requires:
            - test_ui

      - build_user_service_docker_image:
          name: build_user_service_docker_image
          requires:
            - test_user_service
            - test_user_service_e2e

      - build_api_docker_image:
          name: build_api_docker_image
          requires:
            - test_api

      - cypress_e2e_tests:
          name: cypress_e2e_tests
          requires:
            - build-ui
            - build_user_service_docker_image
      - cypress_e2e_tests:
          name: cypress_e2e_tests_api
          api: true
          forces-with-api-enabled: "01"
          api-case-details: true
          api-case-list: true
          api-case-resubmit: true
          requires:
            - build-ui
            - build_user_service_docker_image
            - build_api_docker_image

      - cucumber_e2e_tests:
          name: cucumber_e2e_tests
          requires:
            - build-ui
            - build_user_service_docker_image
      - cucumber_e2e_tests:
          name: cucumber_e2e_tests_api
          api: true
          forces-with-api-enabled: "01"
          api-case-details: true
          api-case-list: true
          api-case-resubmit: true
          requires:
            - build-ui
            - build_user_service_docker_image
            - build_api_docker_image

      - zap_scanner:
          requires:
            - build-ui
            - build_user_service_docker_image

      - e2e_test:
          next-ui: false
          phase2-core-canary-ratio: "1.0"
          phase3-core-canary-ratio: "1.0"
          ms-edge: false
          requires:
            - lint_and_build

      - test_user_service_e2e:
          <<: *merge_queue_only
          name: test_user_service_e2e_ms_edge
          ms-edge: true
      - cypress_component_test:
          <<: *merge_queue_only
          name: cypress_component_test_ms_edge
          ms-edge: true
      - cypress_e2e_tests:
          <<: *merge_queue_only
          name: cypress_e2e_tests_ms_edge
          ms-edge: true
          requires:
            - build-ui
            - build_user_service_docker_image
      - cucumber_e2e_tests:
          <<: *merge_queue_only
          name: cucumber_e2e_tests_ms_edge
          ms-edge: true
          requires:
            - build-ui
            - build_user_service_docker_image
